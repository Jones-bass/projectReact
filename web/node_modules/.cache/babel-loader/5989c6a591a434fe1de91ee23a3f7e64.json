{"ast":null,"code":"import { useState } from 'react';\nimport axios from 'axios';\nimport useDebouncedPromise from 'components/utils/useDebouncedPromise';\nconst initialRequestInfo = {\n  error: null,\n  data: null,\n  loading: false\n};\nexport default function useApi(config) {\n  const [requestInfo, setRequestInfo] = useState(initialRequestInfo);\n  const debouncedAxios = useDebouncedPromise(axios, config.debounceDelay);\n\n  async function call(localConfig) {\n    let response = null;\n    const finalConfig = {\n      baseURL: 'http://localhost:5000',\n      updateRequestInfo: newInfo => newInfo,\n      ...config,\n      ...localConfig\n    };\n\n    if (finalConfig.isFetchMore) {\n      setRequestInfo({ ...initialRequestInfo,\n        data: requestInfo.data,\n        loading: true\n      });\n    } else if (!finalConfig.quietly) {\n      setRequestInfo({ ...initialRequestInfo,\n        loading: true\n      });\n    }\n\n    const fn = finalConfig.debounced ? debouncedAxios : axios;\n\n    try {\n      response = await fn(finalConfig);\n      console.log(response.headers);\n      const newRequestInfo = { ...initialRequestInfo,\n        data: response.data\n      };\n\n      if (response.headers['x-total-count'] !== undefined) {\n        newRequestInfo.total = Number.parseInt(response.headers['x-total-count'], 10);\n      }\n\n      setRequestInfo(finalConfig.updateRequestInfo(newRequestInfo, requestInfo));\n    } catch (error) {\n      setRequestInfo(finalConfig.updateRequestInfo({ ...initialRequestInfo,\n        error\n      }, requestInfo));\n    }\n\n    if (config.onCompleted) {\n      config.onCompleted(response);\n    }\n\n    return response;\n  }\n\n  return [call, requestInfo];\n}","map":{"version":3,"sources":["/home/jonesbass/Development/new-app/web/src/components/utils/useApi.js"],"names":["useState","axios","useDebouncedPromise","initialRequestInfo","error","data","loading","useApi","config","requestInfo","setRequestInfo","debouncedAxios","debounceDelay","call","localConfig","response","finalConfig","baseURL","updateRequestInfo","newInfo","isFetchMore","quietly","fn","debounced","console","log","headers","newRequestInfo","undefined","total","Number","parseInt","onCompleted"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,IADkB;AAEzBC,EAAAA,IAAI,EAAE,IAFmB;AAGzBC,EAAAA,OAAO,EAAE;AAHgB,CAA3B;AAMA,eAAe,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACrC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAACG,kBAAD,CAA9C;AACA,QAAMQ,cAAc,GAAGT,mBAAmB,CAACD,KAAD,EAAQO,MAAM,CAACI,aAAf,CAA1C;;AAEA,iBAAeC,IAAf,CAAoBC,WAApB,EAAiC;AAC/B,QAAIC,QAAQ,GAAG,IAAf;AAEA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAE,uBADS;AAElBC,MAAAA,iBAAiB,EAAGC,OAAD,IAAaA,OAFd;AAGlB,SAAGX,MAHe;AAIlB,SAAGM;AAJe,KAApB;;AAOA,QAAIE,WAAW,CAACI,WAAhB,EAA6B;AAC3BV,MAAAA,cAAc,CAAC,EACb,GAAGP,kBADU;AAEbE,QAAAA,IAAI,EAAEI,WAAW,CAACJ,IAFL;AAGbC,QAAAA,OAAO,EAAE;AAHI,OAAD,CAAd;AAKD,KAND,MAMO,IAAI,CAACU,WAAW,CAACK,OAAjB,EAA0B;AAC/BX,MAAAA,cAAc,CAAC,EACb,GAAGP,kBADU;AAEbG,QAAAA,OAAO,EAAE;AAFI,OAAD,CAAd;AAID;;AAED,UAAMgB,EAAE,GAAGN,WAAW,CAACO,SAAZ,GAAwBZ,cAAxB,GAAyCV,KAApD;;AAEA,QAAI;AACFc,MAAAA,QAAQ,GAAG,MAAMO,EAAE,CAACN,WAAD,CAAnB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACW,OAArB;AACA,YAAMC,cAAc,GAAG,EACrB,GAAGxB,kBADkB;AAErBE,QAAAA,IAAI,EAAEU,QAAQ,CAACV;AAFM,OAAvB;;AAKA,UAAIU,QAAQ,CAACW,OAAT,CAAiB,eAAjB,MAAsCE,SAA1C,EAAqD;AACnDD,QAAAA,cAAc,CAACE,KAAf,GAAuBC,MAAM,CAACC,QAAP,CACrBhB,QAAQ,CAACW,OAAT,CAAiB,eAAjB,CADqB,EAErB,EAFqB,CAAvB;AAID;;AAEDhB,MAAAA,cAAc,CACZM,WAAW,CAACE,iBAAZ,CAA8BS,cAA9B,EAA8ClB,WAA9C,CADY,CAAd;AAGD,KAlBD,CAkBE,OAAOL,KAAP,EAAc;AACdM,MAAAA,cAAc,CACZM,WAAW,CAACE,iBAAZ,CACE,EACE,GAAGf,kBADL;AAEEC,QAAAA;AAFF,OADF,EAKEK,WALF,CADY,CAAd;AASD;;AAED,QAAID,MAAM,CAACwB,WAAX,EAAwB;AACtBxB,MAAAA,MAAM,CAACwB,WAAP,CAAmBjB,QAAnB;AACD;;AACD,WAAOA,QAAP;AACD;;AAED,SAAO,CAACF,IAAD,EAAOJ,WAAP,CAAP;AACD","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nimport useDebouncedPromise from 'components/utils/useDebouncedPromise';\n\nconst initialRequestInfo = {\n  error: null,\n  data: null,\n  loading: false,\n};\n\nexport default function useApi(config) {\n  const [requestInfo, setRequestInfo] = useState(initialRequestInfo);\n  const debouncedAxios = useDebouncedPromise(axios, config.debounceDelay);\n\n  async function call(localConfig) {\n    let response = null;\n\n    const finalConfig = {\n      baseURL: 'http://localhost:5000',\n      updateRequestInfo: (newInfo) => newInfo,\n      ...config,\n      ...localConfig,\n    };\n\n    if (finalConfig.isFetchMore) {\n      setRequestInfo({\n        ...initialRequestInfo,\n        data: requestInfo.data,\n        loading: true,\n      });\n    } else if (!finalConfig.quietly) {\n      setRequestInfo({\n        ...initialRequestInfo,\n        loading: true,\n      });\n    }\n\n    const fn = finalConfig.debounced ? debouncedAxios : axios;\n\n    try {\n      response = await fn(finalConfig);\n      console.log(response.headers);\n      const newRequestInfo = {\n        ...initialRequestInfo,\n        data: response.data,\n      };\n\n      if (response.headers['x-total-count'] !== undefined) {\n        newRequestInfo.total = Number.parseInt(\n          response.headers['x-total-count'],\n          10\n        );\n      }\n\n      setRequestInfo(\n        finalConfig.updateRequestInfo(newRequestInfo, requestInfo)\n      );\n    } catch (error) {\n      setRequestInfo(\n        finalConfig.updateRequestInfo(\n          {\n            ...initialRequestInfo,\n            error,\n          },\n          requestInfo\n        )\n      );\n    }\n\n    if (config.onCompleted) {\n      config.onCompleted(response);\n    }\n    return response;\n  }\n\n  return [call, requestInfo];\n}\n"]},"metadata":{},"sourceType":"module"}