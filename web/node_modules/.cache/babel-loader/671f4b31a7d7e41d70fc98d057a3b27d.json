{"ast":null,"code":"var _jsxFileName = \"/home/jonesbass/Development/new-app/web/src/components/UI/InfiniteScroll/InfiniteScroll.js\";\nimport React from \"react\";\n\nconst UIInfiniteScroll = ({\n  fetchMore\n}) => {\n  const containerRef = useRef();\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 1.0\n    };\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        observer.disconnect();\n        fetchMore();\n      }\n    }, options);\n    observer.observe(containerRef.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default UIInfiniteScroll;","map":{"version":3,"sources":["/home/jonesbass/Development/new-app/web/src/components/UI/InfiniteScroll/InfiniteScroll.js"],"names":["React","UIInfiniteScroll","fetchMore","containerRef","useRef","useEffect","options","root","rootMargin","threshold","observer","IntersectionObserver","entry","isIntersecting","disconnect","observe","current"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC1C,QAAMC,YAAY,GAAGC,MAAM,EAA3B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAE,IADQ;AAEdC,MAAAA,UAAU,EAAE,KAFE;AAGdC,MAAAA,SAAS,EAAE;AAHG,KAAhB;AAMA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAACC,KAAD,CAAD,KAAa;AACrD,UAAIA,KAAK,CAACC,cAAV,EAA0B;AACxBH,QAAAA,QAAQ,CAACI,UAAT;AACAZ,QAAAA,SAAS;AACV;AACF,KALgB,EAKdI,OALc,CAAjB;AAMAI,IAAAA,QAAQ,CAACK,OAAT,CAAiBZ,YAAY,CAACa,OAA9B;AAEA,WAAO,MAAM;AACXN,MAAAA,QAAQ,CAACI,UAAT;AACD,KAFD;AAGD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBAAO;AAAK,IAAA,GAAG,EAAEX,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAxBD;;AA0BA,eAAeF,gBAAf","sourcesContent":["import React from \"react\";\n\nconst UIInfiniteScroll = ({ fetchMore }) => {\n  const containerRef = useRef();\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 1.0,\n    };\n\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        observer.disconnect();\n        fetchMore();\n      }\n    }, options);\n    observer.observe(containerRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return <div ref={containerRef} />;\n};\n\nexport default UIInfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}